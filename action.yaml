name: 'steps to package a Python lambda function'
description: 'Package a Lambda with uv and Python'
inputs:
    working-directory:
        required: true
        description: 'The working directory which will be packaged for deployment'
    python-version:
         required: true
         default: '3.13'
         description: 'The Python version that your Lambda function runs in'
    max-local-package-size-bytes:
          required: true
          default: '262144000'
          description: 'The maximum allowed local package size for lambda'
runs:
    using: "composite"
    steps:
        - uses: actions/setup-python@v5
          with:
            python-version: ${{ inputs.python-version }}
        - uses: astral-sh/setup-uv@v5
        - run: |
            mkdir lambda_package
            if [[ -f uv.lock ]]; then
               uv export --frozen --no-emit-workspace --no-emit-project --no-dev --no-editable --no-hashes -o requirements.txt
               uv pip install -r requirements.txt --target lambda_package
            fi
            cp *.py lambda_package/
          working-directory: ${{ inputs.working-directory }}
          shell: bash
          name: Install the code's dependencies and package them along with the source code itself
        - run: |
            package_size_bytes=$(du -s lambda_package | awk '{print $1}')
            if [[ $package_size_bytes -le MAXIMUM_PACKAGE_SIZE_IN_BYTES ]]; then
               echo "destination=local" >> GITHUB_OUTPUT
               echo "::notice::The package size is below 250MB unzipped. It means it can be deployed from the runner."
            else
               echo "destination=s3" >> GITHUB_OUTPUT
               echo "::warning::The package size exceeds 250MB, which means the lambda package file should be published to S3"
            fi
          shell: bash
          working-directory: ${{ inputs.working-directory }}
          id: publish_destination
          name: Get the publish destination for the package
          env:
            MAXIMUM_PACKAGE_SIZE_IN_BYTES: ${{ inputs.max-local-package-size-bytes }}
        - run: |
            zip -r lambda_package.zip lambda_package
            chmod 644 lambda_package.zip
          working-directory: ${{ inputs.working-directory }}
          shell: bash
          name: Package the dependencies and the source code
