name: 'steps to package a Python lambda function'
author: 'Nick Minaev'
branding:
  color: green
  icon: disc
description: 'Package a Lambda with uv and Python'
inputs:
    working-directory:
        required: true
        description: 'The working directory which will be packaged for deployment'
    output-package-name:
        required: true
        default: 'lambda_package'
        description: 'The name of the zip archive to be produced by this action (without the extension)'
    max-allowed-package-size-bytes:
          required: true
          default: '262144000'
          description: 'The maximum allowed package size for lambda'
    max-direct-deploy-size-bytes:
          required: true
          default: '52428800'
          description: 'The maximum size for the direct deployment package'
outputs: 
    destination: 
        value: ${{ steps.publish_destination.outputs.destination }}
        description: "s3 for publishing the package to an S3 bucket; direct for a possibility to publish the package directly into a Lambda."
runs:
    using: "composite"
    steps:
    # TBD: dynamic Python version according to the local .python-version file
        - uses: astral-sh/setup-uv@v5
        - run: |
            depsList=$(cat pyproject.toml | grep "dependencies = ")
            depsEmpty=false
            if [[ ! -f uv.lock ]]; then
                if [[ $depsList != *"[]"* ]]; then
                    echo "::error::There are dependencies in the pyproject.toml file, but there's no uv.lock file. Please, check it in also."
                    exit 0
                fi
            fi
            mkdir ${{ inputs.output-package-name }}
            if [[ -f uv.lock ]]; then
               uv export --frozen --no-emit-workspace --no-emit-project --no-dev --no-editable --no-hashes -o requirements.txt
               uv pip install -r requirements.txt --target ${{ inputs.output-package-name }}
            fi
            cp *.py ${{ inputs.output-package-name }}/
          working-directory: ${{ inputs.working-directory }}
          shell: bash
          name: Install the code's dependencies and package them along with the source code itself
        - run: |
            package_size_bytes=$(du -s ${{ inputs.output-package-name }} | awk '{print $1}')
            if [[ $package_size_bytes -gt $MAXIMUM_PACKAGE_SIZE_IN_BYTES ]]; then
               echo "::error::The package size exceeds 250MB. It cannot be deployed locally or to an S3 bucket. Use a container instead. In such case, it can be up to 10GB in size."
               exit 1
            fi
            zip -r ${{ inputs.output-package-name }}.zip ${{ inputs.output-package-name }} > /dev/null
            chmod 644 ${{ inputs.output-package-name }}.zip
            package_size_bytes=$(du -s ${{ inputs.output-package-name }}.zip | awk '{print $1}')
            destination="direct"
            if [[ $package_size_bytes -gt $MAXIMUM_DIRECT_DEPLOY_SIZE_IN_BYTES ]]; then
               destination="s3"
               echo "::warning::The zip archive's size for direct deploy exceeds 50MB. Deploy the file to an S3 bucket instead."
            fi
            echo "$destination"
            echo "destination=$destination" >> "$GITHUB_OUTPUT"
          shell: bash
          working-directory: ${{ inputs.working-directory }}
          id: publish_destination
          name: Build the package and provide a destination
          env:
            MAXIMUM_PACKAGE_SIZE_IN_BYTES: ${{ inputs.max-allowed-package-size-bytes }}
            MAXIMUM_DIRECT_DEPLOY_SIZE_IN_BYTES: ${{ inputs.max-direct-deploy-size-bytes }}
