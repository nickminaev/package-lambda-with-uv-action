name: 'steps to package a Python lambda function'
description: 'Package a Lambda with uv and Python'
inputs:
    working-directory:
        required: true
        description: 'The working directory which will be packaged for deployment'
    max-allowed-package-size-bytes:
          required: true
          default: '262144000'
          description: 'The maximum allowed package size for lambda'
    max-direct-deploy-size-bytes:
          required: true
          default: '52428800'
          description: 'The maximum size for the direct deployment package'
runs:
    using: "composite"
    steps:
    # TBD: dynamic Python version according to the local .python-version file
        - uses: astral-sh/setup-uv@v5
        - run: |
            depsList=$(cat pyproject.toml | grep "dependencies = ")
            depsEmpty=false
            if [[ $depsList == *"[]"* ]] && [[ -f uv.lock ]]; then
               echo "::eror::You probably forgot to check in the uv.lock file. It contains the actual resolution of dependencies. Please chec it in."
               exit 0
            fi
            mkdir lambda_package
            if [[ -f uv.lock ]]; then
               uv export --frozen --no-emit-workspace --no-emit-project --no-dev --no-editable --no-hashes -o requirements.txt
               uv pip install -r requirements.txt --target lambda_package
            fi
            cp *.py lambda_package/
          working-directory: ${{ inputs.working-directory }}
          shell: bash
          name: Install the code's dependencies and package them along with the source code itself
        - run: |
            package_size_bytes=$(du -s lambda_package | awk '{print $1}')
            if [[ $package_size_bytes -gt $MAXIMUM_PACKAGE_SIZE_IN_BYTES ]]; then
               echo "::error::The package size exceeds 250MB. It cannot be deployed locally or to an S3 bucket. Use a container instead. In such case, it can be up to 10GB in size."
               exit 1
            fi
            zip -r lambda_package.zip lambda_package > /dev/null
            chmod 644 lambda_package.zip
            package_size_bytes=$(du -s lambda_package.zip | awk '{print $1}')
            if [[ $package_size_bytes -gt $MAXIMUM_DIRECT_DEPLOY_SIZE_IN_BYTES ]]; then
               echo "::warning::The zip archive's size for direct deploy exceeds 50MB. Deploy the file to an S3 bucket instead."
               echo "distination=s3" >> $GITHUB_OUTPUT
            else
                echo "distination=local" >> $GITHUB_OUTPUT
                echo "::notice::The zip archive's file is below 50MB. You can directly deploy it to the Lambda function."
            fi
          shell: bash
          working-directory: ${{ inputs.working-directory }}
          id: publish_destination
          name: Build the package and provide a destination
          env:
            MAXIMUM_PACKAGE_SIZE_IN_BYTES: ${{ inputs.max-allowed-package-size-bytes }}
            MAXIMUM_DIRECT_DEPLOY_SIZE_IN_BYTES: ${{ inputs.max-direct-deploy-size-bytes }}
